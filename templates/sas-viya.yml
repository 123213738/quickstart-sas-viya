---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys a SAS Viya stack.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: SAS Viya License and Install Package
        Parameters:
          - DeploymentDataLocation
      - Label:
          default: Administration
        Parameters:
          - KeyPairName
          - WebIngressLocation
          - AdminIngressLocation
          - SASAdminPass
          - SASUserPass
          - OperatorEmail
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnetID
          - PrivateSubnetID
      - Label:
          default: Server DNS configuration (only required for custom DNS name and SSL)
        Parameters:
          - DomainName
          - AWSHostedZoneID
          - SSLCertificateARN
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix

    ParameterLabels:
      KeyPairName:
        default: Key Name
      PrivateSubnetID:
        default: Private Subnet ID
      PublicSubnetID:
        default: Public Subnet ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      DeploymentDataLocation:
        default: SAS Viya Software Order File
      VPCID:
        default: VPC ID
      AdminIngressLocation:
        default: Permitted IP Range for Deployment Administrator
      WebIngressLocation:
        default: Permitted IP Range for Application Access
      SASAdminPass:
        default: SAS Administrator Password
      SASUserPass:
        default: Password for sasuser01--sasuser10
      OperatorEmail:
        default: Operator Email
      SSLCertificateARN:
        default: SSL Certificate
      DomainName:
        default: Domain Name
      AWSHostedZoneID:
        default: Route 53 Hosted Zone

Parameters:

  DeploymentDataLocation:
    AllowedPattern: >-
      ^([-a-zA-Z0-9@:%_\+.~#?&//=]*)\.zip$
    Description: >-
      S3 location of the Software Order Confirmation e-mail attachment.
      Example: mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip
    Type: String
    MinLength: '1'
    ConstraintDescription: must be a zip file in a valid S3 bucket location, e.g. mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip

  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair. This will allow you to access the Ansible Controller after it launches.
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: '1'
    ConstraintDescription: must be a existing AWS Key Pair name current AWS region.
  WebIngressLocation:
      Description: >-
        Allow inbound HTTP traffic to the SAS Viya Environment from this CIDR block (IP address range). Must be a valid IP CIDR range of the form x.x.x.x/x.
      Type: String
      MinLength: '9'
      MaxLength: '18'
      AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AdminIngressLocation:
    Description: >-
      Allow inbound SSH traffic to the Ansible Controller from this CIDR block (IP address range). Must be a valid IP CIDR range of the form x.x.x.x/x.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  SASAdminPass:
    Description: >-
      Password of the SAS Admin User (sasadmin). Must have at least 6 and no more than 255 characters.
    Type: String
    MinLength: '6'
    MaxLength: '255'
    NoEcho: true
    ConstraintDescription: Password must have at least 6 and no more than 255 characters.
  SASUserPass:
    Description: >-
      Password of the SAS Users (sasuser01--sasuser10). Must have at least 6 and no more than 255 characters.
    Type: String
    MinLength: '6'
    MaxLength: '255'
    NoEcho: true
    ConstraintDescription: Password must have at least 6 and no more than 255 characters.

  VPCID:
    Description: ID of an existing VPC with a public and a private subnet in the same Availability Zone.
    Type: AWS::EC2::VPC::Id
    MinLength: '12'
    MaxLength: '21'
    ConstraintDescription: must be an existing VPC ID in the current AWS region
  PublicSubnetID:
    Description: >-
      ID of public subnet for the Elastic Load Balancer
      and Ansible Controller (e.g. subnet-9bc642ac)
      (must be in the same AZ as PrivateSubnetID)
    Type: AWS::EC2::Subnet::Id
    MinLength: '15'
    MaxLength: '24'
    ConstraintDescription: must be an existing Subnet ID in the current AWS region
  PrivateSubnetID:
    Description: >-
      ID of private subnet for the SAS Viya Application VMs (e.g. subnet-a0246dcd)
      (must be in the same AZ as PublicSubnetID)
    Type: AWS::EC2::Subnet::Id
    MinLength: '15'
    MaxLength: '24'
    ConstraintDescription: must be an existing Subnet ID in the current AWS region

  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: quickstart-reference
    Description: >-
      S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: sas/viya/latest/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  OperatorEmail:
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)|^$"
    ConstraintDescription: must be a valid email address.
    Description: Email address to send a notification about deployment success or failure (optional).
    Type: String
    Default: ''


  SSLCertificateARN:
    Description: >-
      The AWS CertificateManager ARN for the SSL certificate to use to enable HTTPS. The certificate needs to match the DomainName.
      Syntax: arn:aws:acm:region:account-id:certificate/certificate-id
      Example: arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
    Type: String
    Default: ''
  DomainName:
    Description: The SAS Viya Server portal will be reachable at this DNS name (blank = generated ELB name will be used as application DNS name)
    Type: String
    Default: ''
  AWSHostedZoneID:
    Description: Existing DNS Zone ID for the DomainName (blank = generated ELB name will be used as application DNS name)
    Type: String
    Default: ''


Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2017.09.1.20180108-x86_64-gp2
      RHEL74HVM: RHEL-7.4_HVM_GA-20170724-x86_64-1-Hourly2-GP2
    ap-northeast-1:
      AMZNLINUXHVM: ami-33c25b55
      RHEL74HVM: ami-30ef0556
    ap-northeast-2:
      AMZNLINUXHVM: ami-d9b616b7
      RHEL74HVM: ami-0f5a8361
    ap-south-1:
      AMZNLINUXHVM: ami-fedb8f91
      RHEL74HVM: ami-e41b618b
    ap-southeast-1:
      AMZNLINUXHVM: ami-889cecf4
      RHEL74HVM: ami-10bb2373
    ap-southeast-2:
      AMZNLINUXHVM: ami-ccab56ae
      RHEL74HVM: ami-ccecf5af
    ca-central-1:
      AMZNLINUXHVM: ami-61f97c05
      RHEL74HVM: ami-dad866be
    eu-central-1:
      AMZNLINUXHVM: ami-0fc85a60
      RHEL74HVM: ami-d74be5b8
    eu-west-1:
      AMZNLINUXHVM: ami-e487179d
      RHEL74HVM: ami-bb9a6bc2
    eu-west-2:
      AMZNLINUXHVM: ami-51809835
      RHEL74HVM: ami-a1f5e4c5
    eu-west-3:
       AMZNLINUXHVM: ami-fe03b483
       RHEL74HVM: ami-dc13a4a1
    sa-east-1:
      AMZNLINUXHVM: ami-1226647e
      RHEL74HVM: ami-a789ffcb
    us-east-1:
      AMZNLINUXHVM: ami-cb9ec1b1
      RHEL74HVM: ami-c998b6b2
    us-east-2:
      AMZNLINUXHVM: ami-caaf84af
      RHEL74HVM: ami-cfdafaaa
    us-west-1:
      AMZNLINUXHVM: ami-95eeeef5
      RHEL74HVM: ami-66eec506
    us-west-2:
      AMZNLINUXHVM: ami-32cf7b4a
      RHEL74HVM: ami-9fa343e7
  LinuxAMINameMap:
    RHEL-7.4-HVM:
      Code: RHEL74HVM
    Amazon-Linux-HVM:
      Code: AMZNLINUXHVM


Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - Fn::EachMemberEquals:
              - Fn::RefAll: AWS::EC2::KeyPair::KeyName
              - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert:
          Fn::EachMemberIn:
            - Fn::ValueOfAll:
                - AWS::EC2::Subnet::Id
                - VpcId
            - Fn::RefAll: AWS::EC2::VPC::Id
        AssertDescription: All subnets must in the VPC
  SubnetsInSameAZ:
    Assertions:
      - Assert:
          Fn::Equals:
            - Fn::ValueOf:
              - PublicSubnetID
              - AvailabilityZone
            - Fn::ValueOf:
              - PrivateSubnetID
              - AvailabilityZone
        AssertDescription: Public and Private subnet must in the same AZ
  DomainNameWithHostedZone:
    Assertions:
      - Assert:
          Fn::Or:
          - Fn::And:
            - !Equals
              - !Ref DomainName
              - ''
            - !Equals
              - !Ref AWSHostedZoneID
              - ''
          - Fn::And:
            - !Not
              - !Equals
                - !Ref DomainName
                - ''
            - !Not
              - !Equals
                - !Ref AWSHostedZoneID
                - ''
        AssertDescription: DomainName and AWSHostedZoneID need to be set together
Conditions:
  GovCloudCondition: !Equals
    - !Ref AWS::Region
    - us-gov-west-1
  SNSCondition: !Not
    - !Equals
      - !Ref OperatorEmail
      - ''

  NoDNSEntry:
    Fn::Or:
    - Fn::Equals:
      - ''
      - Ref: AWSHostedZoneID
    - Fn::Equals:
      - ''
      - Ref: DomainName
  HasDNSEntry:
    Fn::Not:
    - Condition: NoDNSEntry
  NoSSLCertficate:
    Fn::Equals:
    - ''
    - Ref: SSLCertificateARN
  HasSSLCertificate:
    Fn::Not:
    - Condition: NoSSLCertficate


Resources:


  # Lambda Function that scans the license file for the CAS cpu count
  # and returns instance sizes and counts
  LicenseFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import zipfile
          import boto3
          import io
          import cfnresponse
          responseData = {}
          responseStatus = cfnresponse.FAILED
          s3 = boto3.client('s3')
          def license(event, context):
            ddl = event['ResourceProperties']['DeploymentDataLocation']
            bucket = ddl[:ddl.find('/')]
            key = ddl[ddl.find('/')+1:]
            obj = s3.get_object(Bucket=bucket, Key=key)
            with io.BytesIO(obj["Body"].read()) as tf:
              # rewind the file
              tf.seek(0)
              # Read the file as a zipfile and process the members
              with zipfile.ZipFile(tf, mode='r') as zipf:
                for file in zipf.infolist():
                  # find the license file and extract into temporary file
                  if (file.filename.startswith('licenses/')):
                    templicensefile = zipf.extract(file,'/tmp')
              # wrap lines and extract into array
              tline = ''
              lf = []
              with open(templicensefile) as tlf:
                for line in tlf:
                  tline = tline + line
                  if ';' in line:
                    lf.append(tline)
                    tline = ''
              # find line with cpu for cas product number (e.g. EXPIRE 'PRODNUM1141' '31MAY2018'D / CPU=CPU001;)
              for row in lf:
                if 'EXPIRE' in row:
                  if 'PRODNUM1141' in row:
                    prodnum = row
              if prodnum is None:
                raise ValueError('The CAS product number was not found in the license file.')
              # get name of cas cpu
              cascpu = prodnum[prodnum.find('CPU=')+4:prodnum.find(';')]
              if cascpu is None:
                raise ValueError('The CASCPU number was not found in the license file.')
              # get line with CASCPU (e.g.  CPU MODEL=' ' MODNUM=' ' SERIAL='+16' NAME=CPU001;)
              for row in lf:
                if "NAME="+cascpu in row:
                  model = row
              if model is None:
                raise ValueError('The CPU detail row for the CAS cpu was not found in the license file.')
              # extract cpu count
              cpucount = int(model[model.find('SERIAL=')+9:][:3].replace("'",""))
              responseData['CPUCount'] = cpucount
              responseStatus = cfnresponse.SUCCESS
              if cpucount == 4:
                responseData["NodeInstanceSize"] = "2xlarge"
                responseData["NumWorkers"] = 0
                responseData["CASLibSize"] = 500
                responseData["UserLibSize"] = 500
                responseData["CASCacheSize"] = 180
              elif cpucount <= 8:
                responseData["NodeInstanceSize"] = "4xlarge"
                responseData["NumWorkers"] = 0
                responseData["CASLibSize"] = 500
                responseData["UserLibSize"] = 500
                responseData["CASCacheSize"] = 360
              elif cpucount <= 16:
                responseData["NodeInstanceSize"] = "8xlarge"
                responseData["NumWorkers"] = 0
                responseData["CASLibSize"] = 1000
                responseData["UserLibSize"] = 1000
                responseData["CASCacheSize"] = 720
              else:
                responseStatus = "FAILED"
                print("Invalid Licensed CPU Count: {0}".format(cpucount))
              cfnresponse.send(event, context, responseStatus, responseData)
      Handler: index.license
      Runtime: python2.7
      Timeout: 30
      Role: !GetAtt LicenseLambdaExecutionRole.Arn
  LicenseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - s3:getObject
            Resource: !Sub 'arn:aws:s3:::${DeploymentDataLocation}'
  # create the log Group for Lambda by Cloudformation to ensure
  # it isdeleted at termination
  LicenseLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LicenseFunction}

  # Custom Property to determine deployment size
  LicenseInfo:
    Type: Custom::LicenseInfo
    Properties:
      ServiceToken: !GetAtt LicenseFunction.Arn
      DeploymentDataLocation: !Ref DeploymentDataLocation

  SNSTopic:
    Condition: SNSCondition
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: "email"

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  RecoveryAlarmVisual:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails more than once in 2 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !If
          - SNSCondition
          - !Ref SNSTopic
          - !Ref AWS::NoValue
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: VisualServices

  RecoveryAlarmStateful:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails more than once in 2 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !If
          - SNSCondition
          - !Ref SNSTopic
          - !Ref AWS::NoValue
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: StatefulServices

  RecoveryAlarmProgramming:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails more than once in 2 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !If
          - SNSCondition
          - !Ref SNSTopic
          - !Ref AWS::NoValue
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: ProgrammingServices

  RecoveryAlarmController:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails more than once in 2 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Maximum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - !If
          - SNSCondition
          - !Ref SNSTopic
          - !Ref AWS::NoValue
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: CASController


  ViyaPlacementGroup:
    Type: AWS::EC2::PlacementGroup

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:
            Fn::If:
            - HasSSLCertificate
            - '443'
            - '80'
          ToPort:
            Fn::If:
            - HasSSLCertificate
            - '443'
            - '80'
          CidrIp: !Ref WebIngressLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref WebIngressLocation

  AnsibleControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enables SSH Access to Ansible Controller
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref AdminIngressLocation

  ViyaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to all Viya VMs
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref AnsibleControllerSecurityGroup

  ProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the Viya HTTPD serer
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup



  # open ports between all participants
  # all hosts need to succeed an ssh-keyscan to all other hosts of the deployment
  # and for consul communication
  ViyatoviyaSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ViyaSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref ViyaSecurityGroup


  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnetID
      SecurityGroups:
        - !Ref ELBSecurityGroup
      AppCookieStickinessPolicy:
        - CookieName: dummy
          PolicyName: WorkloadCookieStickinessPolicy
      Listeners:
        - LoadBalancerPort:
            Fn::If:
            - HasSSLCertificate
            - '443'
            - '80'
          Protocol:
            Fn::If:
            - HasSSLCertificate
            - HTTPS
            - HTTP
          InstanceProtocol: HTTP
          InstancePort: '80'
          SSLCertificateId:
            Fn::If:
            - HasSSLCertificate
            - Ref: SSLCertificateARN
            - Ref: AWS::NoValue
          PolicyNames:
            - WorkloadCookieStickinessPolicy
      CrossZone: 'true'
      HealthCheck:
        Target: 'TCP:80'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
      Instances:
        - !Ref StatefulServices
        - !Ref VisualServices
        - !Ref ProgrammingServices

  DNSNameEntry:
    Type: AWS::Route53::RecordSet
    Condition: HasDNSEntry
    DependsOn:
    - ElasticLoadBalancer
    Properties:
      HostedZoneId:
        Ref: AWSHostedZoneID
      Name:
        Fn::Sub: ${DomainName}.
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - CanonicalHostedZoneNameID
        DNSName:
          Fn::GetAtt:
          - ElasticLoadBalancer
          - DNSName



  ViyaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: 'ssm:GetParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/viya-ansiblekey-${AWS::StackName}'
                Effect: Allow
          PolicyName: viya-services-ssm-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource: !Sub
                  - arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudWatchLogGroup}:*
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: viya-services-cloudwatch-logs-policy
  ViyaProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ViyaRole

  VisualServices:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT10M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/diskprep.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/node_setup.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref AWS::Region
                CloudFormationStack: !Ref AWS::StackName
            /tmp/cloudwatch.conf:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
                Role: VisualServices
          commands:
            01-diskprep:
              command: /tmp/diskprep.sh
            02-setup:
              command: /tmp/node_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
         - AWSAMIRegionMap
         - !Ref AWS::Region
         - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaProfile
      InstanceType: r4.4xlarge
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref ViyaSecurityGroup
        - !Ref ProxySecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Visual Services"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            export PATH=$PATH:/usr/local/bin
            which pip &> /dev/null
            if [ $? -ne 0 ] ; then
              echo "PIP NOT INSTALLED"
              [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
              [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            fi
            pip install --upgrade pip &> /dev/null
            pip install awscli --ignore-installed six &> /dev/null
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cfn-init --stack ${AWS::StackName} --resource VisualServices --configsets quickstart --region ${AWS::Region}
            # Signal the status from cfn-init
            cfn-signal -e $? --stack ${AWS::StackName} --resource VisualServices --region ${AWS::Region}
  ProgrammingServices:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT10M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/diskprep.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/node_setup.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref AWS::Region
                CloudFormationStack: !Ref AWS::StackName
            /tmp/cloudwatch.conf:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
                Role: ProgrammingServices
          commands:
            01-diskprep:
              command: /tmp/diskprep.sh
            02-setup:
              command: /tmp/node_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaProfile
      InstanceType: r4.2xlarge
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref ProxySecurityGroup
        - !Ref ViyaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Programming Services"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            export PATH=$PATH:/usr/local/bin
            which pip &> /dev/null
            if [ $? -ne 0 ] ; then
              echo "PIP NOT INSTALLED"
              [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
              [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            fi
            pip install --upgrade pip &> /dev/null
            pip install awscli --ignore-installed six &> /dev/null
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cfn-init --stack ${AWS::StackName} --resource ProgrammingServices --configsets quickstart --region ${AWS::Region}
            # Signal the status from cfn-init
            cfn-signal -e $? --stack ${AWS::StackName} --resource ProgrammingServices --region ${AWS::Region}
  StatefulServices:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT10M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/diskprep.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/node_setup.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref AWS::Region
                CloudFormationStack: !Ref AWS::StackName
            /tmp/cloudwatch.conf:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
                Role: StatefulServices
          commands:
            01-diskprep:
              command: /tmp/diskprep.sh
            02-setup:
              command: /tmp/node_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaProfile
      InstanceType: r4.2xlarge
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
      SecurityGroupIds:
        - !Ref ViyaSecurityGroup
        - !Ref ProxySecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Stateful Services"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            export PATH=$PATH:/usr/local/bin
            which pip &> /dev/null
            if [ $? -ne 0 ] ; then
              echo "PIP NOT INSTALLED"
              [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
              [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            fi
            pip install --upgrade pip &> /dev/null
            pip install awscli --ignore-installed six &> /dev/null
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cfn-init --stack ${AWS::StackName} --resource StatefulServices --configsets quickstart --region ${AWS::Region}
            # Signal the status from cfn-init
            cfn-signal -e $? --stack ${AWS::StackName} --resource StatefulServices --region ${AWS::Region}



  CASController:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT10M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/diskprep.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/node_setup.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/node_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref AWS::Region
                CloudFormationStack: !Ref AWS::StackName
            /tmp/cloudwatch.conf:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
                Role: cas-controller

          commands:
            01-diskprep:
              command: /tmp/diskprep.sh
            02-setup:
              command: /tmp/node_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaProfile
      # transform "Nxlarge (N cores)" to "r4.Nxlarge"
      InstanceType: !Join
        - ''
        - - 'r4.'
          - !GetAtt LicenseInfo.NodeInstanceSize
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      SecurityGroupIds:
        - !Ref ViyaSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdd
          Ebs:
            VolumeSize: !GetAtt LicenseInfo.CASCacheSize
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdl
          Ebs:
            VolumeSize: !GetAtt LicenseInfo.CASLibSize
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} CAS Controller
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            export PATH=$PATH:/usr/local/bin
            which pip &> /dev/null
            if [ $? -ne 0 ] ; then
              echo "PIP NOT INSTALLED"
              [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
              [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            fi
            pip install --upgrade pip &> /dev/null
            pip install awscli --ignore-installed six &> /dev/null
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            cfn-init --stack ${AWS::StackName} --resource CASController --configsets quickstart --region ${AWS::Region}
            # Signal the status from cfn-init
            cfn-signal -e $? --stack ${AWS::StackName} --resource CASController --region ${AWS::Region}


  AnsiblePublicKey:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub 'viya-ansiblekey-${AWS::StackName}'
      Description: !Sub 'viya-ansiblekey-${AWS::StackName}'
      Type: String
      Value: dummy

  AnsibleControllerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "cloudformation:DescribeStackResources"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}*/*"
                Effect: Allow
          PolicyName: ansiblecontroller-cfn-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'SNS:Publish'
                Resource: "*"
                Effect: Allow
          PolicyName: ansiblecontroller-sns-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:ListBucket'
                  - 's3:ListObjects'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}*'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:getObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${DeploymentDataLocation}'
                Effect: Allow
          PolicyName: viya-playbook-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ssm:PutParameter'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/viya-ansiblekey-${AWS::StackName}'
                Effect: Allow
          PolicyName: ansible-controller-ssm-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - 'arn:${Partition}:s3:::quickstart-reference/linux/bastion/*'
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: linux-bastion-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeInstances'
                  - 'elasticloadbalancing:DescribeLoadBalancers'
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: ansiblecontroller-ec2-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource: !Sub
                  - arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudWatchLogGroup}:*
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: ansiblecontroller-cloudwatch-logs-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
  AnsibleControllerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AnsibleControllerRole
      Path: /
  AnsibleControllerEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AnsibleController:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT3H30M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref AnsibleControllerRole
          buckets:
            - !Ref QSS3BucketName
            - quickstart-reference/linux/bastion
            - !Ref DeploymentDataLocation
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - config
            - sasprep
        config:
          files:
            /tmp/ansiblecontroller_prereqs.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/ansiblecontroller_prereqs.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/bastion_bootstrap.sh:
              source: !Sub
                - https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/bastion_bootstrap.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/cloudwatch.conf:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.ansiblecontroller.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
          commands:
            01-bootstrap:
              command: /tmp/bastion_bootstrap.sh --enable false
            02-cloudwatch:
              command: >-
                sed -i 's/{instance_id}/ansible-controller-commands.log/' /etc/awslogs/awslogs.conf;
                cat /tmp/cloudwatch.conf >> /etc/awslogs/awslogs.conf;
                service awslogs restart
            03-prereqs:
              command: /tmp/ansiblecontroller_prereqs.sh
        sasprep:
          files:
            /tmp/install.sh:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/install.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
              context:
                SASAdminPass: !Ref SASAdminPass
                SASUserPass: !Ref SASUserPass
                LogGroup: !Ref CloudWatchLogGroup
                SNSTopic: !If [SNSCondition, !Ref SNSTopic, ""]
                AWSRegion: !Ref AWS::Region
                KeyPairName: !Ref KeyPairName
                AnsibleControllerIP: !Ref AnsibleControllerEIP
                NumWorkers: !GetAtt LicenseInfo.NumWorkers
                CloudFormationStack: !Ref AWS::StackName
                CloudWatchLogs: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=${CloudWatchLogGroup}"
                SSLCertificateARN: !Ref SSLCertificateARN
                DomainName: !Ref DomainName

            /tmp/SAS_Viya_deployment_data.zip:
              source: !Sub
                - https://${QSS3Region}.amazonaws.com/${DeploymentDataLocation}
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds

            /tmp/ansible.cfg:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/ansible.cfg
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.update.inventory.yml:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/update.inventory.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.pre.deployment.yml:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/pre.deployment.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.post.deployment.yml:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/post.deployment.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.update.vars.file.yml:
              source: !Sub
                - https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/update.vars.file.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
          commands:
            01-getopenldap:
              command: !Sub sudo su -l ec2-user -c "mkdir openldap; aws s3 cp --recursive s3://${QSS3BucketName}/${QSS3KeyPrefix}openldap openldap"
            02-install:
              command: sudo su -l ec2-user -c "/tmp/install.sh"
    Properties:
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetID
      IamInstanceProfile: !Ref AnsibleControllerProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - AMZNLINUXHVM
      SecurityGroupIds:
        - !Ref AnsibleControllerSecurityGroup
      InstanceType: t2.small
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Ansible Controller"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            export PATH=$PATH:/usr/local/bin:/opt/aws/bin
            pip install awscli --ignore-installed six &> /dev/null
            EIP_LIST=${AnsibleControllerEIP}
            CLOUDWATCHGROUP=${CloudWatchLogGroup}
            cfn-init --stack ${AWS::StackName} --resource AnsibleController --configsets quickstart --region ${AWS::Region}
            # Signal the status from cfn-init
            cfn-signal -e $? --stack ${AWS::StackName} --resource AnsibleController --region ${AWS::Region}

Outputs:
  SASHome:
    Description: SAS Viya launch page for SAS solutions and SAS Environment Manager
    Value: !Join
      - ''
      - - Fn::If:
          - HasSSLCertificate
          - 'https://'
          - 'http://'
        - Fn::If:
          - HasDNSEntry
          - !Ref DomainName
          - !GetAtt
            - ElasticLoadBalancer
            - DNSName
        - '/SASHome'
  SASStudio:
    Description: SAS Studio
    Value: !Join
      - ''
      - - Fn::If:
          - HasSSLCertificate
          - 'https://'
          - 'http://'
        - Fn::If:
          - HasDNSEntry
          - !Ref DomainName
          - !GetAtt
            - ElasticLoadBalancer
            - DNSName
        - '/SASStudio'
  CASMonitor:
    Description: CAS Server Monitor
    Value: !Join
      - ''
      - - Fn::If:
          - HasSSLCertificate
          - 'https://'
          - 'http://'
        - Fn::If:
          - HasDNSEntry
          - !Ref DomainName
          - !GetAtt
            - ElasticLoadBalancer
            - DNSName
        - ':/cas-shared-default-http/tkcas.dsp'
  AnsibleControllerIP:
    Description: Ansible Controller IP address
    Value: !Ref AnsibleControllerEIP
  CloudWatchLogs:
    Description: CloudWatch Logs.
    # e.g.     https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logStream:group=qs-viya-CloudWatchLogGroup-1KIGMD9DKO4RH
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/cloudwatch/home?region='
        - !Ref AWS::Region
        - "#logStream:group="
        - !Ref CloudWatchLogGroup

  VisualServicesIP:
    Description: SAS Viya Visual Services IP address
    Value: !GetAtt
      - VisualServices
      - PrivateIp
  ProgrammingServicesIP:
    Description: SAS Viya Programming Services IP address
    Value: !GetAtt
      - ProgrammingServices
      - PrivateIp
  StatefulServicesIP:
    Description: SAS Viya Stateful Services IP address
    Value: !GetAtt
      - StatefulServices
      - PrivateIp
  CASControllerIP:
    Description: CAS Controller IP address
    Value: !GetAtt
      - CASController
      - PrivateIp

