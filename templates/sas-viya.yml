---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This workload template deploys a SAS Viya stack.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: SAS Viya License and Install Package
        Parameters:
          - DeploymentDataLocation
      - Label:
          default: SAS Viya Compute Node Size
        Parameters:
          - CASControllerNodeInstanceType
      - Label:
          default: Administration
        Parameters:
          - KeyPairName
          - WebIngressLocation
          - AdminIngressLocation
          - SASViyaAdminPassword
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PublicSubnetID
          - PrivateSubnetID
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      KeyPairName:
        default: Key Name
      PrivateSubnetID:
        default: Private Subnet ID
      PublicSubnetID:
        default: Public Subnet ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      DeploymentDataLocation:
        default: SAS Viya Software Order File
      VPCID:
        default: VPC ID
      CASControllerNodeInstanceType:
        default: CAS Controller Node Instance Type
      AdminIngressLocation:
        default: Permitted IP Range for Deployment Administrator
      WebIngressLocation:
        default: Permitted IP Range for Application Access
      SASViyaAdminPassword:
        default: SAS Viya Administrator Password

Parameters:

  DeploymentDataLocation:
    AllowedPattern: >-
      ^([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
    Description: >-
      S3 location of the Software Order Confirmation e-mail attachment.
      Example: mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip
    Type: String
    ConstraintDescription: must be a valid S3 bucket location, e.g. mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip

  CASControllerNodeInstanceType:
    AllowedValues:
      - "i3.large (2 vCPUs)"
      - "i3.xlarge (4 vCPUs)"
      - "i3.2xlarge (8 vCPUs)"
      - "i3.4xlarge (16 vCPUs)"
      - "i3.8xlarge (32 vCPUs)"
      - "i3.16xlarge (64 vCPUs)"
    ConstraintDescription: Must contain valid instance type
    Default: "i3.2xlarge (8 vCPUs)"
    Description: Type of EC2 instance for the Viya Compute Node
    Type: String

  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair. This will allow you to access the Bastion host after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
  WebIngressLocation:
      Description: >-
        CIDR block (IP address range) to allow HTTPS access to the
        SAS Viya Environment. Example: 1.2.3.4/32.
      Type: String
      MinLength: '9'
      MaxLength: '18'
      AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
      ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AdminIngressLocation:
    Description: >-
      CIDR block (IP address range) to allow SSH access to the
      bastion host. Example: 1.2.3.4/32.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SASViyaAdminPassword:
    Description: >-
      Password of the initial SAS Viya Admin User (sasboot)
    Type: String
    MinLength: '6'
    MaxLength: '255'
    NoEcho: true
    ConstraintDescription: Password must have a at least 6 and no more than 255 characters.

  VPCID:
    Description: ID of and existing VPC with a public and a private subnet in the same Availability Zone.
    Type: 'AWS::EC2::VPC::Id'
  PublicSubnetID:
    Description: >-
      ID of public subnet for the ELB load balancer
      and bastion host (e.g. subnet-9bc642ac)
      (needs to be the same AZ as PrivateSubnetID)
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnetID:
    Description: >-
      ID of private subnet for the SAS Viya Application nodes (e.g. subnet-a0246dcd)
      (needs to be the same AZ as PublicSubnetID)
    Type: 'AWS::EC2::Subnet::Id'

  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: quickstart-reference
    Description: >-
      S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: examples/latest/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  OperatorEmail:
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)|^$"
    ConstraintDescription: "must be a valid email address."
    Description: "Email address to sent a notification about deployment success or failure (optional)."
    Type: String

Rules:
  KeyPairsNotEmpty:
    Assertions:
      - Assert: !Not
          - 'Fn::EachMemberEquals':
              - 'Fn::RefAll': 'AWS::EC2::KeyPair::KeyName'
              - ''
        AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2017.03.1.20170623-x86_64-gp2
      RHEL74HVM: RHEL-7.4_HVM_GA-20170724-x86_64-1-Hourly2-GP2
    ap-northeast-1:
      AMZNLINUXHVM: ami-3bd3c45c
      RHEL74HVM: ami-30ef0556
    ap-northeast-2:
      AMZNLINUXHVM: ami-e21cc38c
      RHEL74HVM: ami-0f5a8361
    ap-south-1:
      AMZNLINUXHVM: ami-47205e28
      RHEL74HVM: ami-e41b618b
    ap-southeast-1:
      AMZNLINUXHVM: ami-77af2014
      RHEL74HVM: ami-10bb2373
    ap-southeast-2:
      AMZNLINUXHVM: ami-10918173
      RHEL74HVM: ami-ccecf5af
    ca-central-1:
      AMZNLINUXHVM: ami-a7aa15c3
      RHEL74HVM: ami-dad866be
    eu-central-1:
      AMZNLINUXHVM: ami-82be18ed
      RHEL74HVM: ami-d74be5b8
    eu-west-1:
      AMZNLINUXHVM: ami-d7b9a2b1
      RHEL74HVM: ami-bb9a6bc2
    eu-west-2:
      AMZNLINUXHVM: ami-ed100689
      RHEL74HVM: ami-a1f5e4c5
    sa-east-1:
      AMZNLINUXHVM: ami-87dab1eb
      RHEL74HVM: ami-a789ffcb
    us-east-1:
      AMZNLINUXHVM: ami-a4c7edb2
      RHEL74HVM: ami-c998b6b2
    us-east-2:
      AMZNLINUXHVM: ami-8a7859ef
      RHEL74HVM: ami-cfdafaaa
    us-west-1:
      AMZNLINUXHVM: ami-327f5352
      RHEL74HVM: ami-66eec506
    us-west-2:
      AMZNLINUXHVM: ami-6df1e514
      RHEL74HVM: ami-9fa343e7
  LinuxAMINameMap:
    RHEL-7.4-HVM:
      Code: RHEL74HVM
    Amazon-Linux-HVM:
      Code: AMZNLINUXHVM

Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  SNSCondition: !Not
    - !Equals
      - !Ref OperatorEmail
      - ""

Resources:

  SNSTopic:
    Condition: SNSCondition
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEmail
          Protocol: "email"

  CloudWatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7

  ViyaPlacementGroup:
    Type: 'AWS::EC2::PlacementGroup'

  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref WebIngressLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref WebIngressLocation
#  CASELBSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: Allow access to the CAS ELB
#      VpcId: !Ref VPCID
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: '5570'
#          ToPort: '5570'
#          CidrIp: !Ref WebIngressLocation
#        - IpProtocol: tcp
#          FromPort: '5570'
#          ToPort: '5570'
#          CidrIp: !Ref AdminIngressLocation
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Access to Bastion Hosts
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref AdminIngressLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref WebIngressLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref WebIngressLocation
  CASControllerNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to the CAS Controller instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8777'
          ToPort: '8777'
          SourceSecurityGroupId: !Ref ViyaServicesNodeSecurityGroup
        - IpProtocol: tcp
          FromPort: '5570'
          ToPort: '5570'
          SourceSecurityGroupId: !Ref ViyaServicesNodeSecurityGroup
#        - IpProtocol: tcp
#          FromPort: '5570'
#          ToPort: '5570'
#          SourceSecurityGroupId: !Ref CASELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroup
  ViyaServicesNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to the Viya Services instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionSecurityGroup
  ViyaSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ViyaServicesNodeSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref CASControllerNodeSecurityGroup
  CASSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref CASControllerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref ViyaServicesNodeSecurityGroup
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PublicSubnetID
      SecurityGroups:
        - !Ref ELBSecurityGroup
      AppCookieStickinessPolicy:
        - CookieName: dummy
          PolicyName: WorkloadCookieStickinessPolicy
      Listeners:
        - LoadBalancerPort: '80'
          Protocol: HTTP
          InstanceProtocol: HTTPS
          InstancePort: '443'
          PolicyNames:
            - WorkloadCookieStickinessPolicy
      CrossZone: 'true'
      HealthCheck:
        Target: 'TCP:443'
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
      Instances:
        - !Ref ViyaServicesNode
#  CASElasticLoadBalancer:
#    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
#    Properties:
#      Subnets:
#        - !Ref PublicSubnetID
#      SecurityGroups:
#        - !Ref CASELBSecurityGroup
#      Listeners:
#        - LoadBalancerPort: '5570'
#          InstancePort: '5570'
#          Protocol: TCP
#      Instances:
#        - !Ref CASControllerNode
  ViyaNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource: !Sub
                  - >-
                    arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudWatchLogGroup}:*
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: viya-node-cloudwatch-logs-policy
  ViyaNodeProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ViyaNodeRole
  ViyaServicesNode:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaNodeRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/qs.pub:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}keys/qs.pub
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/diskprep.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/log_setup.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/log_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref 'AWS::Region'
            /tmp/cloudwatch.conf:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.services.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup
          commands:
            01-setqskey:
              command: >-
                cat /tmp/qs.pub >> /home/ec2-user/.ssh/authorized_keys; rm /tmp/qs.pub;
            02-diskprep:
              command: /tmp/diskprep.sh
            03-cloudwatch:
              command: /tmp/log_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaNodeProfile
      InstanceType: i3.4xlarge
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdh
          VirtualName: ephemeral0
        - DeviceName: /dev/sdi
          VirtualName: ephemeral1
        - DeviceName: /dev/sdj
          VirtualName: ephemeral2
        - DeviceName: /dev/sdk
          VirtualName: ephemeral3
        - DeviceName: /dev/sdl
          VirtualName: ephemeral4
        - DeviceName: /dev/sdm
          VirtualName: ephemeral5
        - DeviceName: /dev/sdn
          VirtualName: ephemeral6
        - DeviceName: /dev/sdo
          VirtualName: ephemeral7
      SecurityGroupIds:
        - !Ref ViyaServicesNodeSecurityGroup
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - Viya Services node
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              export PATH=$PATH:/usr/local/bin
            - |
              which pip &> /dev/null
            - |
              if [ $? -ne 0 ] ; then
            - |2
                  echo "PIP NOT INSTALLED"
            - |2
                  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
            - |2
                  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            - |
              fi
            - |
              pip install --upgrade pip &> /dev/null
            - |
              pip install awscli --ignore-installed six &> /dev/null
            - >
              easy_install
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - |
            - 'cfn-init --stack '
            - !Ref 'AWS::StackName'
            - ' --resource ViyaServicesNode --configsets quickstart --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - 'cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource ViyaServicesNode --region '
            - !Ref 'AWS::Region'
            - |+

  CASControllerNode:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref ViyaNodeRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - install
            - configure
            - cleanup
        install:
          files:
            /tmp/qs.pub:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}keys/qs.pub
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/diskprep.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/diskprep.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /usr/sbin/disks_ephemeral.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/disks_ephemeral.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/log_setup.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/log_setup.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                AWSRegion: !Ref 'AWS::Region'
            /tmp/cloudwatch.conf:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/cloudwatch.controller.conf
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
              context:
                LogGroup: !Ref CloudWatchLogGroup

            # for the EA only - should be already available on production install
            /tmp/accessclients.tar:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}EA/accessclients.tar
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000440'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/tkeredsh.so:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}EA/tkeredsh.so
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000644'
              owner: root
              group: root
              authentication: S3AccessCreds


          commands:
            01-setqskey:
              command: >-
                cat /tmp/qs.pub >> /home/ec2-user/.ssh/authorized_keys; rm /tmp/qs.pub;
            02-diskprep:
              command: /tmp/diskprep.sh
            03-cloudwatch:
              command: /tmp/log_setup.sh
        configure: {}
        cleanup: {}
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHEL74HVM
      SubnetId: !Ref PrivateSubnetID
      IamInstanceProfile: !Ref ViyaNodeProfile
      InstanceType: !Select [ 0 , !Split [ " ", !Ref CASControllerNodeInstanceType ] ]
      EbsOptimized: true
      PlacementGroupName: !Ref ViyaPlacementGroup
      SecurityGroupIds:
        - !Ref CASControllerNodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdg
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/sdh
          VirtualName: ephemeral0
        - DeviceName: /dev/sdi
          VirtualName: ephemeral1
        - DeviceName: /dev/sdj
          VirtualName: ephemeral2
        - DeviceName: /dev/sdk
          VirtualName: ephemeral3
        - DeviceName: /dev/sdl
          VirtualName: ephemeral4
        - DeviceName: /dev/sdm
          VirtualName: ephemeral5
        - DeviceName: /dev/sdn
          VirtualName: ephemeral6
        - DeviceName: /dev/sdo
          VirtualName: ephemeral7
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - CAS Controller node
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              export PATH=$PATH:/usr/local/bin
            - |
              which pip &> /dev/null
            - |
              if [ $? -ne 0 ] ; then
            - |2
                  echo "PIP NOT INSTALLED"
            - |2
                  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
            - |2
                  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            - |
              fi
            - |
              pip install --upgrade pip &> /dev/null
            - |
              pip install awscli --ignore-installed six &> /dev/null
            - >
              easy_install
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - |
            - 'cfn-init --stack '
            - !Ref 'AWS::StackName'
            - ' --resource CASControllerNode --configsets quickstart --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - 'cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource CASControllerNode --region '
            - !Ref 'AWS::Region'
            - |+

  BastionHostRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'SNS:Publish'
                Resource: "*"
                Effect: Allow
          PolicyName: bastion-sns-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:ListBucket'
                  - 's3:ListObjects'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}*'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:getObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${DeploymentDataLocation}'
                Effect: Allow
          PolicyName: viya-playbook-s3-policy

        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                Resource: !Sub
                  - 'arn:${Partition}:s3:::quickstart-reference/linux/bastion/*'
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: linux-bastion-s3-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ec2:AssociateAddress'
                  - 'ec2:DescribeAddresses'
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: bastion-eip-policy
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:GetLogEvents'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                  - 'logs:PutMetricFilter'
                  - 'logs:CreateLogGroup'
                Resource: !Sub
                  - >-
                    arn:${Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CloudWatchLogGroup}:*
                  - Partition: !If
                      - GovCloudCondition
                      - aws-us-gov
                      - aws
                Effect: Allow
          PolicyName: bastion-cloudwatch-logs-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
  BastionHostProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref BastionHostRole
      Path: /
  EIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  BastionHost:
    DependsOn:
      - ViyaServicesNode
      - CASControllerNode
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: 'PT2H30M'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref BastionHostRole
          buckets:
            - !Ref QSS3BucketName
            - quickstart-reference/linux/bastion
            - !Ref DeploymentDataLocation
      'AWS::CloudFormation::Init':
        configSets:
          quickstart:
            - config
            - sasprep
        config:
          files:
            /tmp/bastion_prereqs.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/bastion_prereqs.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
            /tmp/bastion_bootstrap.sh:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/bastion_bootstrap.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            00-workaround:
               command: echo "net.ipv4.tcp_timestamps = 0" >> /etc/sysctl.conf; sysctl -p
            01-bootstrap:
              command: /tmp/bastion_bootstrap.sh --enable false
            02-prereqs:
              command: /tmp/bastion_prereqs.sh
        sasprep:
          files:
            /tmp/install.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/install.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
              context:
                ViyaServicesNodeIP: !GetAtt ViyaServicesNode.PrivateIp
                CASControllerNodeIP: !GetAtt CASControllerNode.PrivateIp
                SASViyaAdminPassword: !Ref SASViyaAdminPassword
                LogGroup: !Ref CloudWatchLogGroup
                SNSTopic: !If [SNSCondition, !Ref SNSTopic, ""]
                AWSRegion: !Ref AWS::Region
                KeyPairName: !Ref KeyPairName
                BastionIPV4: !Ref EIP1
                CloudFormationStack: !Ref AWS::StackName
                CloudWatchLogs: !Join
                  - ''
                  - - 'https://console.aws.amazon.com/cloudwatch/home?region='
                    - !Ref 'AWS::Region'
                    - "#logStream:group="
                    - !Ref CloudWatchLogGroup
                SASHome: !Join
                  - ''
                  - - 'http://'
                    - !GetAtt
                      - ElasticLoadBalancer
                      - DNSName
                    - /SASHome
                SASStudio: !Join
                  - ''
                  - - 'http://'
                    - !GetAtt
                      - ElasticLoadBalancer
                      - DNSName
                    - /SASStudio
                CASMonitor: !Join
                  - ''
                  - - 'http://'
                    - !GetAtt
                      - ElasticLoadBalancer
                      - DNSName
                    - ':/cas-shared-default-http/tkcas.dsp'
            /tmp/SAS_Viya_deployment_data.zip:
              source: !Sub
                - >-
                  https://${QSS3Region}.amazonaws.com/${DeploymentDataLocation}
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000550'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds

            # temporary until production
            /tmp/sas-orchestration:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}EA/sas-orchestration
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000770'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds

            /tmp/qs.key:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}keys/qs.key
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000600'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/qs.pub:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}keys/qs.pub
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000600'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.update.inventory.yml:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/update.inventory.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.pre.deployment.yml:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/pre.deployment.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.post.deployment.yml:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/post.deployment.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.update.vars.file.yml:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}playbooks/update.vars.file.yml
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000444'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds
            /tmp/ansible.resetsasboot.sh:
              source: !Sub
                - >-
                  https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}scripts/resetsasboot.sh
                - QSS3Region: !If
                    - GovCloudCondition
                    - s3-us-gov-west-1
                    - s3
              mode: '000777'
              owner: ec2-user
              group: ec2-user
              authentication: S3AccessCreds

          commands:
            01-getprivatekey:
              command: mv /tmp/qs.key /home/ec2-user/.ssh/id_rsa
            02-setqskey:
              command: cat /tmp/qs.pub >> /home/ec2-user/.ssh/authorized_keys; rm /tmp/qs.pub
            03-getopenldap:
              command: !Sub sudo su -l ec2-user -c "mkdir openldap; aws s3 cp --recursive s3://${QSS3BucketName}/${QSS3KeyPrefix}openldap openldap"
            04-install:
              command: sudo su -l ec2-user -c "/tmp/install.sh"
    Properties:
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetID
      IamInstanceProfile: !Ref BastionHostProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMZNLINUXHVM
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: !Join
            - ' '
            - - !Ref 'AWS::StackName'
              - Bastion node
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              export PATH=$PATH:/usr/local/bin
            - |
              which pip &> /dev/null
            - |
              if [ $? -ne 0 ] ; then
            - |2
                  echo "PIP NOT INSTALLED"
            - |2
                  [ `which yum` ] && $(yum install -y epel-release; yum install -y python-pip) && echo "PIP INSTALLED"
            - |2
                  [ `which apt-get` ] && apt-get -y update && apt-get -y install python-pip && echo "PIP INSTALLED"
            - |
              fi
            - |
              pip install --upgrade pip &> /dev/null
            - |
              pip install awscli --ignore-installed six &> /dev/null
            - >
              easy_install
              https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - EIP_LIST="
            - !Ref EIP1
            - |
              "
            - CLOUDWATCHGROUP=
            - !Ref CloudWatchLogGroup
            - |+

            - 'cfn-init -v --stack '
            - !Ref 'AWS::StackName'
            - ' --resource BastionHost --configsets quickstart --region '
            - !Ref 'AWS::Region'
            - |+

#            - 'cfn-signal -e $? --stack '
#            - !Ref 'AWS::StackName'
#            - ' --resource BastionHost --region '
#            - !Ref 'AWS::Region'
#            - |+

Outputs:
  SASHome:
    Description: SAS Viya
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ElasticLoadBalancer
          - DNSName
        - '/SASHome'
  SASStudio:
    Description: SAS Studio
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ElasticLoadBalancer
          - DNSName
        - '/SASStudio'
  CASMonitor:
    Description: CAS Monitor
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ElasticLoadBalancer
          - DNSName
        - ':/cas-shared-default-http/tkcas.dsp'
  BastionIPV4:
    Description: Bastion IP address
    Value: !Ref EIP1
  InstallationLog:
    Description: Installation Logs
    Value: !Join
      - ''
      - - 'http://'
        - !Ref EIP1
        - '/status/'
  CloudWatchLogs:
    Description: CloudWatch Logs.
    # e.g.     https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logStream:group=qs-viya-CloudWatchLogGroup-1KIGMD9DKO4RH
    Value: !Join
      - ''
      - - 'https://console.aws.amazon.com/cloudwatch/home?region='
        - !Ref 'AWS::Region'
        - "#logStream:group="
        - !Ref CloudWatchLogGroup

  ViyaServicesIPV4:
    Description: Viya Services IP address
    Value: !GetAtt
      - ViyaServicesNode
      - PrivateIp
  CASControllerIPV4:
    Description: CAS Controller IP address
    Value: !GetAtt
      - CASControllerNode
      - PrivateIp

