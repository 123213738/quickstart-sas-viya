---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template deploys a SAS Viya stack into a new VPC.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template.'
# The Metadata tells AWS how to display the parameters during stack creation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: SAS Viya License and Install Package
      Parameters:
        - DeploymentDataLocation
    - Label:
        default: SAS Viya Compute Node Size
      Parameters:
        - CASControllerNodeInstanceType
    - Label:
        default: Administration
      Parameters:
        - KeyPairName
        - AvailabilityZone
        - WebIngressLocation
        - AdminIngressLocation
        - SASViyaAdminPassword
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
        - QSS3BucketName
        - QSS3KeyPrefix
    ParameterLabels:
      AvailabilityZone:
        default: VPC Availability Zone
      KeyPairName:
        default: Key Name
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      DeploymentDataLocation:
        default: SAS Viya Software Order File
      ViyaServicesNodeInstanceType:
        default: Viya Services Node Instance Type
      CASControllerNodeInstanceType:
        default: CAS Controller Node Instance Type
      AdminIngressLocation:
        default: Permitted IP Range for Deployment Admin
      WebIngressLocation:
        default: Permitted IP Range for Application Access
      SASViyaAdminPassword:
        default: SAS Viya Administrator Password

# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:

  DeploymentDataLocation:
    AllowedPattern: >-
      ^([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
    Description: >-
      S3 location of the Software Order Confirmation e-mail attachment.
      Example: mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip
    Type: String
    ConstraintDescription: must be a valid S3 bucket location, e.g. mysasbucket/viya_deployment_data/SAS_Viya_deployment_data.zip

  CASControllerNodeInstanceType:
    AllowedValues:
      - "i3.large (2 vCPUs)"
      - "i3.xlarge (4 vCPUs)"
      - "i3.2xlarge (8 vCPUs)"
      - "i3.4xlarge (16 vCPUs)"
      - "i3.8xlarge (32 vCPUs)"
      - "i3.16xlarge (64 vCPUs)"
    ConstraintDescription: Must contain valid instance type
    Default: "i3.2xlarge (8 vCPUs)"
    Description: Type of EC2 instance for the Viya Compute Node.
    Type: String

  KeyPairName:
    Description: >-
      Name of an existing EC2 key pair. This will allow you to access the Bastion host after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'

  AvailabilityZone:
    Description: The Availability Zone for the public and private subnet.
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of an AWS Availability Zone

  AdminIngressLocation:
    Description: "CIDR block (IP address range) from which to allow SSH access to the bastion host. Example: 1.2.3.4/32."
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  WebIngressLocation:
    Description: "CIDR block (IP address range) from which to allow HTTP access to the SAS Viya Environment. Example: 1.2.3.4/32."
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SASViyaAdminPassword:
    Description: >-
      Password of the initial SAS Viya Admin User (sasboot). Must have at least 6 and no more than 255 characters.
    Type: String
    MinLength: '6'
    MaxLength: '255'
    NoEcho: true
    ConstraintDescription: Password must have at least 6 and no more than 255 characters.

  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: quickstart-reference
    Description: >-
      S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: examples/latest/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String

  OperatorEmail:
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)|^$"
    ConstraintDescription: "must be a valid email address."
    Description: "Email address to sent a notification about deployment success or failure (optional)."
    Type: String

Conditions:
  UsEast1Condition:
    Fn::Equals:
    - !Ref AWS::Region
    - "us-east-1"

Resources:
  # Resources for new VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        # us-east-1 needs .ec2.internal, the rest of the regions get <region>.compute.internal.
        # See http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
        Fn::If:
        - UsEast1Condition
        - "ec2.internal"
        - !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/19'
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
      - Key: Name
        Value: Private subnet
      - Key: Network
        Value: Private

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.128.0/20'
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
      - Key: Name
        Value: Public subnet
      - Key: Network
        Value: Public
      - Key: SASViyaStacl
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true

  # The NAT IP for the private subnet, as seen from within the public one
  NATEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # The NAT gateway for the private subnet
  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnets
      - Key: Network
        Value: Private

  PrivateSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable


  # Call the viya template and supply its parameters
  # This creates a second stack that creates the actual application cluster
  # within the new VPC
  SASViyaStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}templates/sas-viya.yml"
      Parameters:
        KeyPairName: !Ref KeyPairName
        PrivateSubnetID: !Ref PrivateSubnet
        PublicSubnetID: !Ref PublicSubnet
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        DeploymentDataLocation: !Ref DeploymentDataLocation
        VPCID: !Ref VPC
        CASControllerNodeInstanceType: !Ref CASControllerNodeInstanceType
        AdminIngressLocation: !Ref AdminIngressLocation
        WebIngressLocation: !Ref WebIngressLocation
        SASViyaAdminPassword: !Ref SASViyaAdminPassword
        OperatorEmail: !Ref OperatorEmail
Outputs:
  # Outputs from VPC creation
  VPCID:
    Description: ID of the newly-created EC2 VPC.
    Value: !Ref VPC


